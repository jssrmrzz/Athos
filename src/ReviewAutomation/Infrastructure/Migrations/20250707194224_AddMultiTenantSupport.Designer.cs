// <auto-generated />
using System;
using Athos.ReviewAutomation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Athos.ReviewAutomation.Infrastructure.Migrations
{
    [DbContext(typeof(ReviewDbContext))]
    [Migration("20250707194224_AddMultiTenantSupport")]
    partial class AddMultiTenantSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleBusinessProfileId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionTier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GoogleBusinessProfileId")
                        .IsUnique();

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.BusinessOAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId", "Provider");

                    b.ToTable("BusinessOAuthTokens");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.BusinessSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoRespondToPositiveReviews")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultResponseTemplate")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSmsNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredLlmProvider")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ReviewSyncIntervalMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmsPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessSettings");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.BusinessUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InvitedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastAccessAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("BusinessId", "UserId")
                        .IsUnique();

                    b.ToTable("BusinessUsers");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.DbReview", b =>
                {
                    b.Property<string>("ReviewId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AlertSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinalResponse")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sentiment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuggestedResponse")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ReviewId");

                    b.HasIndex("BusinessId", "IsApproved");

                    b.HasIndex("BusinessId", "Sentiment");

                    b.HasIndex("BusinessId", "Timestamp");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.BusinessOAuthToken", b =>
                {
                    b.HasOne("Athos.ReviewAutomation.Core.Entities.Business", "Business")
                        .WithMany("OAuthTokens")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.BusinessSettings", b =>
                {
                    b.HasOne("Athos.ReviewAutomation.Core.Entities.Business", "Business")
                        .WithOne("Settings")
                        .HasForeignKey("Athos.ReviewAutomation.Core.Entities.BusinessSettings", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.BusinessUser", b =>
                {
                    b.HasOne("Athos.ReviewAutomation.Core.Entities.Business", "Business")
                        .WithMany("BusinessUsers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Athos.ReviewAutomation.Core.Entities.User", "InvitedBy")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Athos.ReviewAutomation.Core.Entities.User", "User")
                        .WithMany("BusinessUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("InvitedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.DbReview", b =>
                {
                    b.HasOne("Athos.ReviewAutomation.Core.Entities.Business", "Business")
                        .WithMany("Reviews")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.Business", b =>
                {
                    b.Navigation("BusinessUsers");

                    b.Navigation("OAuthTokens");

                    b.Navigation("Reviews");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Athos.ReviewAutomation.Core.Entities.User", b =>
                {
                    b.Navigation("BusinessUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
